#usda 1.0
(
    defaultPrim = "simpleAsset"
    endTimeCode = 1
    metersPerUnit = 0.01
    startTimeCode = 1
    upAxis = "Y"
)

def Xform "simpleAsset" (
    kind = "component"
    prepend references = @./geo.usd@
)
{
    def Scope "mtl"
    {
        def Material "proxy_material"
        {
            token outputs:mtlx:surface.connect = </simpleAsset/mtl/proxy_material/proxy_shader_mtlx.outputs:surface>
            token outputs:surface.connect = </simpleAsset/mtl/proxy_material/proxy_shader.outputs:surface>

            def Shader "proxy_shader_mtlx"
            {
                uniform token info:id = "ND_standard_surface_surfaceshader"
                float inputs:base = 1
                color3f inputs:base_color = (0.8, 0.8, 0.8)
                float inputs:coat = 0
                float inputs:coat_affect_color = 0
                float inputs:coat_affect_roughness = 0
                float inputs:coat_anisotropy = 0
                color3f inputs:coat_color = (1, 1, 1)
                float inputs:coat_IOR = 1.5
                float inputs:coat_rotation = 0
                float inputs:coat_roughness = 0.1
                float inputs:diffuse_roughness = 0
                float inputs:emission = 0
                color3f inputs:emission_color = (1, 1, 1)
                float inputs:metalness = 0
                color3f inputs:opacity = (1, 1, 1)
                float inputs:sheen = 0
                color3f inputs:sheen_color = (1, 1, 1)
                float inputs:sheen_roughness = 0.3
                float inputs:specular = 1
                float inputs:specular_anisotropy = 0
                color3f inputs:specular_color = (1, 1, 1)
                float inputs:specular_IOR = 1.5
                float inputs:specular_rotation = 0
                float inputs:specular_roughness = 0.2
                float inputs:subsurface = 0
                float inputs:subsurface_anisotropy = 0
                color3f inputs:subsurface_color = (1, 1, 1)
                color3f inputs:subsurface_radius = (1, 1, 1)
                float inputs:subsurface_scale = 1
                float inputs:thin_film_IOR = 1.5
                float inputs:thin_film_thickness = 0
                bool inputs:thin_walled = 0
                float inputs:transmission = 0
                color3f inputs:transmission_color = (1, 1, 1)
                float inputs:transmission_depth = 0
                float inputs:transmission_dispersion = 0
                float inputs:transmission_extra_roughness = 0
                color3f inputs:transmission_scatter = (0, 0, 0)
                float inputs:transmission_scatter_anisotropy = 0
                token outputs:surface
            }

            def Shader "proxy_shader"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoatRoughness = 0.1
                color3f inputs:diffuseColor = (0.107700236, 0.90119886, 0.038153667)
                float inputs:roughness = 0.2
                color3f inputs:specularColor = (1, 1, 1)
                token outputs:surface
            }
        }

        def Material "render_material"
        {
            token outputs:mtlx:surface.connect = </simpleAsset/mtl/render_material/render_shader_mtlx.outputs:surface>
            token outputs:surface.connect = </simpleAsset/mtl/render_material/render_shader.outputs:surface>

            def Shader "render_shader_mtlx"
            {
                uniform token info:id = "ND_standard_surface_surfaceshader"
                float inputs:base = 1
                color3f inputs:base_color = (0.8, 0.8, 0.8)
                float inputs:coat = 0
                float inputs:coat_affect_color = 0
                float inputs:coat_affect_roughness = 0
                float inputs:coat_anisotropy = 0
                color3f inputs:coat_color = (1, 1, 1)
                float inputs:coat_IOR = 1.5
                float inputs:coat_rotation = 0
                float inputs:coat_roughness = 0.1
                float inputs:diffuse_roughness = 0
                float inputs:emission = 0
                color3f inputs:emission_color = (1, 1, 1)
                float inputs:metalness = 0
                color3f inputs:opacity = (1, 1, 1)
                float inputs:sheen = 0
                color3f inputs:sheen_color = (1, 1, 1)
                float inputs:sheen_roughness = 0.3
                float inputs:specular = 1
                float inputs:specular_anisotropy = 0
                color3f inputs:specular_color = (1, 1, 1)
                float inputs:specular_IOR = 1.5
                float inputs:specular_rotation = 0
                float inputs:specular_roughness = 0.2
                float inputs:subsurface = 0
                float inputs:subsurface_anisotropy = 0
                color3f inputs:subsurface_color = (1, 1, 1)
                color3f inputs:subsurface_radius = (1, 1, 1)
                float inputs:subsurface_scale = 1
                float inputs:thin_film_IOR = 1.5
                float inputs:thin_film_thickness = 0
                bool inputs:thin_walled = 0
                float inputs:transmission = 0
                color3f inputs:transmission_color = (1, 1, 1)
                float inputs:transmission_depth = 0
                float inputs:transmission_dispersion = 0
                float inputs:transmission_extra_roughness = 0
                color3f inputs:transmission_scatter = (0, 0, 0)
                float inputs:transmission_scatter_anisotropy = 0
                token outputs:surface
            }

            def Shader "render_shader"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoatRoughness = 0.1
                color3f inputs:diffuseColor = (0.1596624, 0.33721665, 0.33379638)
                float inputs:roughness = 0.2
                color3f inputs:specularColor = (1, 1, 1)
                token outputs:surface
            }
        }
    }

    over "geo"
    {
        over "proxy"
        {
            over "simpleAssetShape" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                rel material:binding = </simpleAsset/mtl/proxy_material>
            }
        }

        over "render"
        {
            over "simpleAssetShape" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                rel material:binding = </simpleAsset/mtl/render_material>
            }
        }
    }
}

